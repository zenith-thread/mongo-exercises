for (let i = 0; i < 10000; i++) {
  const productsCatalog = [
    { prod_id: "abc123", name: "Wireless Mouse", price: 22 },
    { prod_id: "xyz789", name: "Laptop Stand", price: 35 },
    { prod_id: "lmn456", name: "USB-C Hub", price: 45 },
    { prod_id: "def321", name: "Mechanical Keyboard", price: 70 },
    { prod_id: "ghi654", name: "Noise Cancelling Headphones", price: 120 },
    { prod_id: "jkl987", name: "Webcam", price: 50 },
    { prod_id: "mno741", name: "Monitor", price: 200 },
    { prod_id: "pqr852", name: "External SSD", price: 150 },
    { prod_id: "stu963", name: "Ergonomic Chair", price: 300 },
    { prod_id: "vwx159", name: "Desk Lamp", price: 40 },
  ];

  const getRandomProducts = () => {
    const count = Math.floor(Math.random() * 3) + 1; // 1 to 3 products
    const shuffled = productsCatalog.sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count).map((product) => ({
      ...product,
      quantity: Math.floor(Math.random() * 5) + 1, // Quantity between 1 and 5
    }));
  };

  const getRandomEmail = () => {
    const id = Math.floor(Math.random() * 100);
    return `user${id}@example.com`;
  };

  const getRandomDate = () => {
    const start = new Date(2005, 0, 1);
    const end = new Date(2024, 11, 31);
    return new Date(
      start.getTime() + Math.random() * (end.getTime() - start.getTime())
    );
  };

  db.ecommerce.insertOne({
    customer_id: getRandomEmail(),
    orderdate: getRandomDate(),
    products: getRandomProducts(),
  });
}

// --------------- BASIC AGGREGATIONS ---------------

// 1. Get the total number of orders per customer.
// (Group by customer, count orders.)

db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Second stage: group each document by customer and count the orders
  {
    $group: {
      _id: "$customer_id",
      total_orders: { $sum: 1 },
    },
  },
  // Third stage: Display the customer email
  {
    $set: { customer_email: "$_id" },
  },
  // Fourth: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 2. Get the total amount spent by each customer in 2022.
// (Match 2022 dates → Unwind → Group by customer → Sum prices.)
db.ecommerce.aggregate([
  // First stage: match by orderdate (2022)
  {
    $match: {
      orderdate: {
        $gte: new Date("2022-01-01T00:00:00Z"),
        $lt: new Date("2023-01-01T00:00:00Z"),
      },
    },
  },
  // Second stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Third stage: group by customer and find total spent by each customer
  {
    $group: {
      _id: "$customer_id",
      total_spent: {
        $sum: { $multiply: ["$products.quantity", "$products.price"] },
      },
    },
  },
  // Fourth stage: Display the customer email
  {
    $set: { customer_email: "$_id" },
  },
  // Fifth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 3. Find the first purchase date of every customer.
// (Match by year → Sort by date → Group by customer → Use $first.)
db.ecommerce.aggregate([
  // First stage: sort by order date in ascending order
  {
    $sort: {
      orderdate: 1,
    },
  },
  // Second stage: group by customer and get each customer's first order date
  {
    $group: {
      _id: "$customer_id",
      first_order_date: { $first: "$orderdate" },
    },
  },
  // Third stage: sort by first order date of the output so we can see output in ascending order
  {
    $sort: {
      first_order_date: 1,
    },
  },
  // Fourth stage: Display the customer email
  {
    $set: { customer_email: "$_id" },
  },
  // Fifth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// --------------- ARRAY UNWIND + GROUPING ---------------
// 1. Find the total revenue generated by each product.
// (Unwind products → Group by prod_id → Sum price.)
db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Second stage: group by product's id and calculate the total revenue generated by that product
  {
    $group: {
      _id: "$products.prod_id",
      total_revenue: {
        $sum: { $multiply: ["$products.price", "$products.quantity"] },
      },
    },
  },
  // Third stage: Display the product id
  {
    $set: { product_id: "$_id" },
  },
  // Fourth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 2. Which products were ordered more than once?
// (Unwind → Group → $sum: 1 → $match total orders > 1.)
db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Second stage: group by product's id and find the total number of orders for that product
  {
    $group: {
      _id: "$products.prod_id",
      total_orders: { $sum: 1 },
    },
  },
  // Third stage: filter all the products who were ordered more than once
  {
    $match: {
      total_orders: { $gt: 1 },
    },
  },
  // Fourth stage: Display the customer email
  {
    $set: { product_id: "$_id" },
  },
  // Fifth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 3. List each product ordered with total quantity and revenue.
// (Assume products also have quantity. Sum both quantity and price.)

db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: {
      path: "$products",
    },
  },
  // Second stage: group products by product's id then calculate total revenue and total quantity sold
  {
    $group: {
      _id: "$products.prod_id",
      total_quantity: { $sum: "$products.quantity" },
      total_revenue: {
        $sum: { $multiply: ["$products.quantity", "$products.price"] },
      },
    },
  },
  // Third stage: Display the customer email
  {
    $set: { product_id: "$_id" },
  },
  // Fourth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// --------------- SORT, LIMIT, FILTER ---------------
// 1. Top 3 best-selling products by total revenue.
// (Same as Q4, but sort descending on total_cost and limit 3.)

db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Second stage: group by product's id and calculate the total revenue
  {
    $group: {
      _id: "$products.prod_id",
      total_revenue: {
        $sum: { $multiply: ["$products.price", "$products.quantity"] },
      },
    },
  },
  // Third stage: sort by total revenue in descending order
  {
    $sort: {
      total_revenue: -1,
    },
  },
  // Fourth stage: only get the top 3 porducts
  {
    $limit: 3,
  },
  // Fifth stage: Display the customer email
  {
    $set: { product_id: "$_id" },
  },
  // Sixth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 2. Find customers who spent more than $50000 total.
// (Group by customer, sum value, filter with $match.)
db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Second stage: group by customer id and calculate the total spent by each customer
  {
    $group: {
      _id: "$customer_id",
      total_spent: {
        $sum: { $multiply: ["$products.quantity", "$products.price"] },
      },
    },
  },
  // Third stage: Filter only those customers who spent more than $50000
  {
    $match: {
      total_spent: { $gt: 50000 },
    },
  },
  // Fourth stage: Display the customer email
  {
    $set: { customer_email: "$_id" },
  },
  // Fifth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 3. List customers who made more than 100 orders.
// (Group by customer, count orders, $match total_orders > 100.)
db.ecommerce.aggregate([
  // First stage: group by customer id and calculate the total number of orders
  {
    $group: {
      _id: "$customer_id",
      total_orders: { $sum: 1 },
    },
    // Second stage: filter and keep only those customers who ordered more than 100 times
  },
  {
    $match: { total_orders: { $gt: 100 } },
  },
  // Third stage: Display the customer email
  {
    $set: { customer_email: "$_id" },
  },
  // Fourth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 4. Top 5 customers by total spending (all time)
// Unwind → Group by customer → Sum price × quantity → Sort descending → Limit 5

db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Second stage: group by customer id and calculate the total spent by each customer
  {
    $group: {
      _id: "$customer_id",
      total_spent: {
        $sum: { $multiply: ["$products.quantity", "$products.price"] },
      },
    },
  },
  // Third stage: sort by total spent by each customer in descending order
  {
    $sort: {
      total_spent: -1,
    },
  },
  // Fourth stage: only display the top 5 customers
  {
    $limit: 5,
  },
  // Fifth stage: Display the customer email
  {
    $set: { customer_email: "$_id" },
  },
  // Sixth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 5. Top 3 most popular products by quantity sold
// Unwind → Group by product → Sum quantity → Sort descending → Limit 3
db.ecommerce.aggregate([
  // First stage: unwind the products array
  {
    $unwind: { path: "$products" },
  },
  // Second stage: group by product's id and calculate the total quantity sold
  {
    $group: {
      _id: "$products.prod_id",
      total_quantity: { $sum: "$products.quantity" },
    },
  },
  // Third stage: Filter out those products who were sold more than 5000 times
  {
    $match: {
      total_quantity: { $gt: 5000 },
    },
  },
  // Fourth stage: Display the customer email
  {
    $set: { product_id: "$_id" },
  },
  // Fifth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 6. Monthly revenue report for 2023
// Match 2023 → Unwind → Group by month → Sum total revenue
db.ecommerce.aggregate([
  // First stage: filtering out the documents which dont lie in the year 2023
  {
    $match: {
      orderdate: {
        $gte: new Date("2023-01-01T00:00:00Z"),
        $lt: new Date("2024-01-01T00:00:00Z"),
      },
    },
  },
  // Second stage: unwinding the products array
  {
    $unwind: { path: "$products" },
  },
  // Third stage: group by months of 2023 and calculate the total revenue for each month
  {
    $group: {
      _id: { $month: "$orderdate" },
      total_revenue: {
        $sum: { $multiply: ["$products.quantity", "$products.price"] },
      },
    },
  },
  // Fourth stage: sort by months in ascending order
  {
    $sort: {
      _id: 1,
    },
  },
  // Fifth stage: Display the Months 2023
  {
    $set: { Months_2023: "$_id" },
  },
  // Sixth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);

// 7. Average number of products per order
// Project order size (array length) → Group to average it

db.ecommerce.aggregate([
  {
    $unwind: {
      path: "$products",
    },
  },
  {
    $group: {
      _id: "$products.prod_id",
      average_quantity: { $avg: "$products.quantity" },
    },
  },
  // Fifth stage: Display the Months 2023
  {
    $set: { product_id: "$_id" },
  },
  // Sixth stage: Remove _id from the output
  {
    $unset: ["_id"],
  },
]);
